{"version":3,"file":"static/js/556.affb1849.chunk.js","mappings":"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","sources":["components/UI/Pagination.js","pages/Product.jsx"],"sourcesContent":["/* eslint-disable import/order */\r\nimport styled from 'styled-components'\r\nimport { Pagination } from '@mui/material'\r\n\r\nconst Paginations = (props) => {\r\n   return (\r\n      <StyledPagination\r\n         count={props.count}\r\n         page={props.page}\r\n         size={props.size}\r\n         onChange={props.onChange}\r\n      />\r\n   )\r\n}\r\n\r\nconst StyledPagination = styled(Pagination)`\r\n   .MuiButtonBase-root {\r\n      color: #bdbdbd;\r\n      font-family: 'Inter';\r\n      font-style: normal;\r\n      font-weight: 500;\r\n      font-size: 16px;\r\n      line-height: 19px;\r\n   }\r\n   .MuiPaginationItem-root {\r\n      &:hover {\r\n         background-color: transparent;\r\n      }\r\n   }\r\n   .Mui-selected {\r\n      color: #dd8a08;\r\n      background-color: transparent !important;\r\n   }\r\n   .MuiPaginationItem-icon {\r\n      color: #dd8a08;\r\n      width: 30px;\r\n      height: 30px;\r\n   }\r\n`\r\nexport default Paginations\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useLocation, useNavigate, useSearchParams } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport ClientApartmentCard from '../components/ClientUserApartmentCard/ClientUserApartmentCard'\r\nimport LoadingSpinner from '../components/LoadingSpinner'\r\nimport BreadCrumbs from '../components/UI/BreadCrumbs'\r\nimport Paginations from '../components/UI/Pagination'\r\nimport { getSelectFilterData } from '../store/slices/SelectFilterInnerPageUserActions'\r\nimport InnerPageFilterCards from './InnerPageFilterCards'\r\n\r\nconst Product = () => {\r\n   const store = useSelector((store) => store?.selectfilterData)\r\n   const navigate = useNavigate()\r\n   const [path, setpath] = useSearchParams()\r\n   const dispatch = useDispatch()\r\n   const [data, setdata] = useState({\r\n      regionId: '',\r\n      kind: '',\r\n      type: '',\r\n      price: '',\r\n      city: '',\r\n      page: 1,\r\n      size: '',\r\n   })\r\n   const getvalue = (e) => {\r\n      setdata({\r\n         ...data,\r\n         regionId: e.regionId,\r\n         kind: e.fetchKind,\r\n         type: e.fetchType,\r\n         price: e.fetchPrice,\r\n         city: e.city,\r\n      })\r\n   }\r\n   const page = (_, value) => {\r\n      setdata({\r\n         ...data,\r\n         page: value,\r\n      })\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (data.kind || data.type) {\r\n         if (data.city) {\r\n            setdata({\r\n               ...data,\r\n               city: path.get('city'),\r\n               page: 1,\r\n            })\r\n            return\r\n         }\r\n         setdata({\r\n            ...data,\r\n            page: 1,\r\n         })\r\n      }\r\n   }, [data.kind, data.type])\r\n   useEffect(() => {\r\n      const search = {}\r\n      if (data.regionId) {\r\n         search.regionId = data.regionId\r\n      }\r\n      if (data.city) {\r\n         search.city = data.city\r\n      }\r\n      if (data.kind) {\r\n         search.kind = data.kind\r\n      }\r\n      if (data.type) {\r\n         search.type = data.type\r\n      }\r\n      if (data.price) {\r\n         search.price = data.price\r\n      }\r\n      if (data.page) {\r\n         search.page = data.page\r\n      }\r\n      setpath(search)\r\n   }, [data.regionId, data.kind, data.type, data.price, data.page, data.city])\r\n   useEffect(() => {\r\n      dispatch(\r\n         getSelectFilterData(`api/announcements/filter?${path.toString()}`)\r\n      )\r\n   }, [path.toString()])\r\n\r\n   const count = Math.ceil(store.totalSizeCard / 16)\r\n   useEffect(() => {\r\n      window.scrollTo(0, 0)\r\n   }, [])\r\n   return (\r\n      <>\r\n         {store.status === 'pending' && <LoadingSpinner />}\r\n         <WrapperContainer>\r\n            <Container>\r\n               <BreadCrumbs location={useLocation()} />\r\n               <InnerPageFilterCards getvalue={getvalue} />\r\n               <WrapperCard>\r\n                  {store?.data?.responses?.map((i) => {\r\n                     return (\r\n                        <WrapperBox\r\n                           key={i.id}\r\n                           onClick={() => navigate(`/main/catalog/${i.id}`)}\r\n                        >\r\n                           <ClientApartmentCard data={i} />\r\n                        </WrapperBox>\r\n                     )\r\n                  })}\r\n               </WrapperCard>\r\n               <WrapperPagination>\r\n                  {store.totalSizeCard > 16 ? (\r\n                     <Paginations\r\n                        count={count}\r\n                        page={data.page}\r\n                        onChange={page}\r\n                     />\r\n                  ) : null}\r\n               </WrapperPagination>\r\n            </Container>\r\n         </WrapperContainer>\r\n      </>\r\n   )\r\n}\r\nexport default React.memo(Product)\r\n\r\nconst WrapperBox = styled.div``\r\nconst WrapperPagination = styled.div`\r\n   margin-top: 60px;\r\n   padding-bottom: 197px;\r\n   width: 1240px;\r\n   display: flex;\r\n   justify-content: center;\r\n`\r\nconst WrapperCard = styled.div`\r\n   display: flex;\r\n   align-items: center;\r\n   flex-wrap: wrap;\r\n   width: 1240px;\r\n   gap: 20px;\r\n`\r\nconst Container = styled.div`\r\n   width: 1240px;\r\n   margin: 0 auto;\r\n   padding-top: 40px;\r\n`\r\nconst WrapperContainer = styled.div`\r\n   width: 100%;\r\n   margin: 0 auto;\r\n   min-height: 800px;\r\n   background: #f7f7f7;\r\n`\r\n"],"names":["StyledPagination","styled","Pagination","props","count","page","size","onChange","Product","store","useSelector","selectfilterData","navigate","useNavigate","useSearchParams","path","setpath","dispatch","useDispatch","useState","regionId","kind","type","price","city","data","setdata","useEffect","get","search","getSelectFilterData","toString","Math","ceil","totalSizeCard","window","scrollTo","status","WrapperContainer","Container","location","useLocation","getvalue","e","fetchKind","fetchType","fetchPrice","WrapperCard","responses","map","i","WrapperBox","onClick","id","WrapperPagination","_","value","React"],"sourceRoot":""}